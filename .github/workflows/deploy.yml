name: Deploy Barbershop Backend

on:
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PM2_APP_NAME: 'barbershop-backend'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "🚀 Starting deployment..."
          
          # Source common paths
          export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:~/.nvm/versions/node/*/bin:~/node_modules/.bin
          source ~/.bashrc 2>/dev/null || true
          source ~/.profile 2>/dev/null || true
          source ~/.nvm/nvm.sh 2>/dev/null || true
          
          # Navigate to project directory
          cd ~/project/Back-End-Sistem-Reservasi-Barbershop/ || {
            echo "❌ Could not find project directory"
            echo "📂 Available directories in project:"
            ls -la ~/project/
            echo "📂 Available directories in home:"
            ls -la ~/
            exit 1
          }
          
          # Check current directory
          echo "📍 Current directory: $(pwd)"
          echo "📋 Current files:"
          ls -la
          
          # Check Node.js and npm
          echo "🔍 Checking Node.js and npm..."
          which node || echo "❌ Node.js not found in PATH"
          which npm || echo "❌ npm not found in PATH"
          which pm2 || echo "❌ PM2 not found in PATH"
          
          # Try to find Node.js installation
          if ! command -v node >/dev/null 2>&1; then
            echo "🔍 Searching for Node.js installation..."
            NODE_PATH=$(find /usr -name "node" -type f 2>/dev/null | head -1)
            if [ -n "$NODE_PATH" ]; then
              echo "✅ Found Node.js at: $NODE_PATH"
              export PATH=$(dirname $NODE_PATH):$PATH
            else
              echo "❌ Node.js not found. Please install Node.js on the server."
              exit 1
            fi
          fi
          
          # Try to find npm
          if ! command -v npm >/dev/null 2>&1; then
            echo "🔍 Searching for npm..."
            NPM_PATH=$(find /usr -name "npm" -type f 2>/dev/null | head -1)
            if [ -n "$NPM_PATH" ]; then
              echo "✅ Found npm at: $NPM_PATH"
              export PATH=$(dirname $NPM_PATH):$PATH
            else
              echo "❌ npm not found. Please install npm on the server."
              exit 1
            fi
          fi
          
          # Show versions
          echo "📋 Environment info:"
          node --version || echo "❌ Node.js not working"
          npm --version || echo "❌ npm not working"
          pm2 --version || echo "⚠️ PM2 not installed"
          
          # Check git status
          echo "📋 Git status:"
          git status || echo "⚠️ Not a git repository or git not available"
          
          # Backup current state
          echo "💾 Creating backup..."
          cp -r . ../backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || echo "⚠️ Backup failed, continuing..."
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin main 2>/dev/null || {
            echo "⚠️ Git fetch failed, trying alternative methods..."
            git pull origin main || echo "❌ Git pull failed"
          }
          git reset --hard origin/main 2>/dev/null || echo "⚠️ Git reset failed"
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          npm install --production || {
            echo "❌ npm install failed, trying npm ci..."
            npm ci --production || {
              echo "❌ All npm install methods failed"
              echo "🔍 Checking npm configuration..."
              npm config list || echo "❌ npm config failed"
              exit 1
            }
          }
          
          # Check if server.js exists
          if [ ! -f "server.js" ]; then
            echo "❌ server.js not found!"
            echo "📂 Files in current directory:"
            ls -la
            exit 1
          fi
          
          # Install PM2 if not found
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "📦 Installing PM2..."
            npm install -g pm2 || {
              echo "❌ Failed to install PM2 globally, trying local install..."
              npm install pm2 || {
                echo "❌ Failed to install PM2"
                exit 1
              }
              export PATH=$PATH:./node_modules/.bin
            }
          fi
          
          # Check PM2 status
          echo "🔍 Checking PM2 status..."
          pm2 list || {
            echo "❌ PM2 command failed"
            exit 1
          }
          
          # Stop existing process if running
          echo "🛑 Stopping existing PM2 process..."
          pm2 stop ${{ env.PM2_APP_NAME }} 2>/dev/null || echo "ℹ️ No existing process to stop"
          
          # Delete existing process
          pm2 delete ${{ env.PM2_APP_NAME }} 2>/dev/null || echo "ℹ️ No existing process to delete"
          
          # Start PM2 application
          echo "🔄 Starting PM2 application..."
          pm2 start server.js --name ${{ env.PM2_APP_NAME }} --env production || {
            echo "❌ PM2 start failed"
            echo "📋 Current directory contents:"
            ls -la
            echo "📋 PM2 logs:"
            pm2 logs || true
            exit 1
          }
          
          # Save PM2 configuration
          echo "💾 Saving PM2 configuration..."
          pm2 save
          
          # Health check
          echo "🏥 Performing health check..."
          sleep 5
          if pm2 describe ${{ env.PM2_APP_NAME }} | grep -q "online"; then
            echo "✅ Application is running successfully"
          else
            echo "⚠️ Application might not be running properly"
            echo "📋 PM2 status:"
            pm2 show ${{ env.PM2_APP_NAME }} || true
            echo "📋 PM2 logs:"
            pm2 logs ${{ env.PM2_APP_NAME }} --lines 20 || true
          fi
          
          # Show final status
          echo "✅ Deployment completed!"
          echo "📊 Final PM2 status:"
          pm2 list